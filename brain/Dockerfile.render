# CUMULATIVE LEARNING APPLIED - All lessons from repeated failures
# Last updated: Aug 11, 2025
# Issues solved: Cache corruption, database auth, heredoc syntax, digest mismatches

FROM php:8.3-apache

# LESSON 1: Always have cache bust mechanism for Render cache issues
# Increment when cache corrupts (happens frequently)
ARG CACHE_BUST=19
RUN echo "Build version: ${CACHE_BUST} - $(date +%s)"

# LESSON 2: Combine operations to reduce layers (fewer layers = less cache corruption)
# LESSON 3: Use --no-install-recommends to reduce size
# LESSON 4: Always clean up in same RUN command
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libpq-dev \
        git \
        unzip \
        curl \
        libzip-dev \
        libicu-dev \
        libonig-dev \
        libxml2-dev \
        zip \
        libsqlite3-dev \
        sshpass \
        openssh-client && \
    docker-php-ext-install pdo pdo_pgsql pdo_mysql pdo_sqlite mysqli zip intl opcache xml && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# LESSON 5: Composer install can fail - use direct download method (most reliable)
# LESSON 6: Don't use COPY --from (causes cache key issues)
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer && \
    composer --version

# Enable Apache modules
RUN a2enmod rewrite

# Set working directory
WORKDIR /var/www/html

# LESSON 7: COPY command is where most failures occur
# Simple, single COPY is most reliable
COPY brain/ .

# LESSON 8: Composer install can fail on Render - add retry logic
# LESSON 9: Use --no-cache to avoid composer cache issues
RUN composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction --no-cache || \
    (sleep 2 && composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction --no-cache)

# LESSON 10: Database credentials MUST be exact - common failure point
# LESSON 11: Watch for 'opg0' vs 'bpg0' in hostname (critical difference)
# LESSON 12: Never use heredocs in Dockerfile - causes parse errors
# LESSON 13: Use echo with >> for multi-line files
RUN echo "APP_NAME=QuotingFast-Brain" > .env && \
    echo "APP_ENV=production" >> .env && \
    echo "APP_KEY=base64:J4kS4Yr5fLJpnwGIDjGfIiCfHqZU+/nnQgxG8jNi3Iw=" >> .env && \
    echo "APP_DEBUG=false" >> .env && \
    echo "APP_URL=https://quotingfast-brain-ohio.onrender.com" >> .env && \
    echo "LOG_CHANNEL=stack" >> .env && \
    echo "LOG_LEVEL=error" >> .env && \
    echo "DB_CONNECTION=pgsql" >> .env && \
    echo "# Force rebuild - $(date +%s) - v13" >> .env && \
    echo "DB_HOST=dpg-d277kvk9c44c7388opg0-a.ohio-postgres.render.com" >> .env && \
    echo "DB_PORT=5432" >> .env && \
    echo "DB_DATABASE=brain_production" >> .env && \
    echo "DB_USERNAME=brain_user" >> .env && \
    echo "DB_PASSWORD=KoK8TYX26PShPKl8LISdhHOQsCrnzcCQ" >> .env && \
    echo "CACHE_DRIVER=file" >> .env && \
    echo "SESSION_DRIVER=file" >> .env && \
    echo "QUEUE_CONNECTION=sync" >> .env && \
    echo "VICI_API_PASS=8ZDWGAAQRD" >> .env && \
    echo "VICI_TEST_MODE=false" >> .env && \
    echo "VICI_PUSH_ENABLED=false" >> .env && \
    echo "# MIGRATION: Set VICI_PUSH_ENABLED=true when ready to push to Vici" >> .env

# LESSON 14: Storage directories might not exist - always create them
# LESSON 15: Combine mkdir operations for efficiency
RUN mkdir -p \
    storage/app/public \
    storage/framework/cache \
    storage/framework/sessions \
    storage/framework/testing \
    storage/framework/views \
    storage/logs \
    bootstrap/cache && \
    chown -R www-data:www-data storage bootstrap/cache && \
    chmod -R 775 storage bootstrap/cache

# LESSON 16: Permissions must be set correctly for Laravel
# LESSON 17: Use && to ensure all commands succeed
RUN chown -R www-data:www-data /var/www/html && \
    chmod -R 755 /var/www/html && \
    chmod -R 777 storage bootstrap/cache

# LESSON 18: Apache config - avoid complex syntax
# LESSON 19: Escape ${} variables properly
RUN echo "<VirtualHost *:80>" > /etc/apache2/sites-available/000-default.conf && \
    echo "    DocumentRoot /var/www/html/public" >> /etc/apache2/sites-available/000-default.conf && \
    echo "    <Directory /var/www/html/public>" >> /etc/apache2/sites-available/000-default.conf && \
    echo "        Options Indexes FollowSymLinks" >> /etc/apache2/sites-available/000-default.conf && \
    echo "        AllowOverride All" >> /etc/apache2/sites-available/000-default.conf && \
    echo "        Require all granted" >> /etc/apache2/sites-available/000-default.conf && \
    echo "    </Directory>" >> /etc/apache2/sites-available/000-default.conf && \
    echo "    ErrorLog \${APACHE_LOG_DIR}/error.log" >> /etc/apache2/sites-available/000-default.conf && \
    echo "    CustomLog \${APACHE_LOG_DIR}/access.log combined" >> /etc/apache2/sites-available/000-default.conf && \
    echo "</VirtualHost>" >> /etc/apache2/sites-available/000-default.conf

# LESSON 20: Startup script - use || true for non-critical commands
# LESSON 21: Migrations might fail if tables exist - that's ok
# LESSON 22: Fix storage permissions before starting - MUST BE AGGRESSIVE
RUN echo '#!/bin/bash' > /usr/local/bin/startup.sh && \
    echo '# Force create log file and set permissions' >> /usr/local/bin/startup.sh && \
    echo 'touch /var/www/html/storage/logs/laravel.log' >> /usr/local/bin/startup.sh && \
    echo 'chown -R www-data:www-data /var/www/html/storage' >> /usr/local/bin/startup.sh && \
    echo 'chown -R www-data:www-data /var/www/html/bootstrap/cache' >> /usr/local/bin/startup.sh && \
    echo 'chmod -R 777 /var/www/html/storage' >> /usr/local/bin/startup.sh && \
    echo 'chmod -R 777 /var/www/html/bootstrap/cache' >> /usr/local/bin/startup.sh && \
    echo '# Skip all artisan commands - they try database connection' >> /usr/local/bin/startup.sh && \
    echo 'php artisan config:clear || true' >> /usr/local/bin/startup.sh && \
    echo 'php artisan cache:clear || true' >> /usr/local/bin/startup.sh && \
    echo 'php artisan route:clear || true' >> /usr/local/bin/startup.sh && \
    echo 'php artisan view:clear || true' >> /usr/local/bin/startup.sh && \
    echo 'php artisan optimize:clear || true' >> /usr/local/bin/startup.sh && \
    echo 'rm -rf storage/framework/cache/data/* || true' >> /usr/local/bin/startup.sh && \
    echo 'rm -rf storage/framework/views/* || true' >> /usr/local/bin/startup.sh && \
    echo 'php artisan migrate --force || true' >> /usr/local/bin/startup.sh && \
    echo '# Start the Laravel scheduler in background' >> /usr/local/bin/startup.sh && \
    echo 'while true; do php artisan schedule:run --no-interaction >> /var/www/html/storage/logs/scheduler.log 2>&1; sleep 60; done &' >> /usr/local/bin/startup.sh && \
    echo 'echo "Scheduler started in background"' >> /usr/local/bin/startup.sh && \
    echo 'apache2-foreground' >> /usr/local/bin/startup.sh && \
    chmod +x /usr/local/bin/startup.sh

EXPOSE 80
CMD ["/usr/local/bin/startup.sh"]

# CUMULATIVE WISDOM:
# 1. Render cache corrupts frequently - always have CACHE_BUST ready
# 2. Database credentials change/get miscopied - double-check hostname (opg0 not bpg0)
# 3. Dockerfile syntax is fragile - no heredocs, simple echo commands
# 4. Fewer layers = fewer problems
# 5. Always clean up in same RUN command
# 6. Composer can fail - add retry logic
# 7. Permissions are critical for Laravel
# 8. Test locally first if possible
# 9. Document every issue and solution
# 10. When in doubt, increment CACHE_BUST and rebuild# 1. Render cache corrupts frequently - always have CACHE_BUST ready
# 2. Database credentials change/get miscopied - double-check hostname (opg0 not bpg0)
# 3. Dockerfile syntax is fragile - no heredocs, simple echo commands
# 4. Fewer layers = fewer problems
# 5. Always clean up in same RUN command
# 6. Composer can fail - add retry logic
# 7. Permissions are critical for Laravel
# 8. Test locally first if possible
# 9. Document every issue and solution
# 10. When in doubt, increment CACHE_BUST and rebuild
