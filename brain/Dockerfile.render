FROM php:8.3-apache

# Debug: Show environment
RUN echo "=== Starting Docker Build ===" && \
    echo "PHP Version: $(php -v | head -1)" && \
    echo "Current directory: $(pwd)" && \
    echo "User: $(whoami)"

# Install system dependencies and PHP extensions in one layer
RUN echo "=== Installing System Dependencies ===" && \
    apt-get update && \
    apt-get install -y \
    libpq-dev \
    git \
    unzip \
    curl \
    libzip-dev \
    libicu-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    libsqlite3-dev \
    && echo "=== Installing PHP Extensions ===" && \
    docker-php-ext-install pdo pdo_pgsql pdo_mysql pdo_sqlite mysqli zip intl opcache xml \
    && echo "=== Cleaning up ===" && \
    apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Composer directly
RUN echo "=== Installing Composer ===" && \
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer && \
    echo "Composer version: $(composer --version)"

# Enable Apache modules
RUN echo "=== Enabling Apache Modules ===" && \
    a2enmod rewrite && \
    echo "Apache modules enabled"

# Set working directory
WORKDIR /var/www/html
RUN echo "=== Working directory set to: $(pwd) ==="

# Debug: List what files we're looking for
RUN echo "=== Checking for brain directory in build context ===" && \
    ls -la / || true && \
    echo "=== Root directory contents above ==="

# Copy application files with debug
RUN echo "=== Attempting to copy brain/ directory ==="
COPY brain/ .

# Debug: Show what was copied
RUN echo "=== Files copied to /var/www/html ===" && \
    ls -la && \
    echo "=== Checking for composer.json ===" && \
    if [ -f composer.json ]; then \
        echo "composer.json found!"; \
        head -5 composer.json; \
    else \
        echo "ERROR: composer.json NOT found!"; \
        echo "Current directory contents:"; \
        ls -la; \
    fi

# Install PHP dependencies with verbose output
RUN echo "=== Installing Composer Dependencies ===" && \
    if [ -f composer.json ]; then \
        composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction --verbose; \
    else \
        echo "ERROR: Cannot run composer install - composer.json missing"; \
        exit 1; \
    fi

# Create .env file with database configuration
RUN echo "=== Creating .env file ===" && \
    echo "APP_NAME=QuotingFast-Brain" > .env && \
    echo "APP_ENV=production" >> .env && \
    echo "APP_KEY=base64:J4kS4Yr5fLJpnwGIDjGfIiCfHqZU+/nnQgxG8jNi3Iw=" >> .env && \
    echo "APP_DEBUG=false" >> .env && \
    echo "APP_URL=https://quotingfast-brain-ohio.onrender.com" >> .env && \
    echo "LOG_CHANNEL=stack" >> .env && \
    echo "LOG_LEVEL=error" >> .env && \
    echo "DB_CONNECTION=pgsql" >> .env && \
    echo "DB_HOST=dpg-d277kvk9c44c7388bpg0-a" >> .env && \
    echo "DB_PORT=5432" >> .env && \
    echo "DB_DATABASE=brain_production" >> .env && \
    echo "DB_USERNAME=brain_user" >> .env && \
    echo "DB_PASSWORD=KoK8TYXZ6PShPKi8LTSdhHQQsCrnzcCQ" >> .env && \
    echo "CACHE_DRIVER=file" >> .env && \
    echo "SESSION_DRIVER=file" >> .env && \
    echo "QUEUE_CONNECTION=sync" >> .env && \
    echo ".env file created"

# Set permissions with debug
RUN echo "=== Setting Permissions ===" && \
    chown -R www-data:www-data /var/www/html && \
    chmod -R 755 /var/www/html && \
    if [ -d storage ]; then \
        chmod -R 777 storage; \
        echo "Storage permissions set"; \
    else \
        echo "WARNING: storage directory not found"; \
    fi && \
    if [ -d bootstrap/cache ]; then \
        chmod -R 777 bootstrap/cache; \
        echo "Bootstrap cache permissions set"; \
    else \
        echo "WARNING: bootstrap/cache directory not found"; \
    fi

# Configure Apache
RUN echo "=== Configuring Apache ===" && \
    echo "<VirtualHost *:80>" > /etc/apache2/sites-available/000-default.conf && \
    echo "    DocumentRoot /var/www/html/public" >> /etc/apache2/sites-available/000-default.conf && \
    echo "    <Directory /var/www/html/public>" >> /etc/apache2/sites-available/000-default.conf && \
    echo "        Options Indexes FollowSymLinks" >> /etc/apache2/sites-available/000-default.conf && \
    echo "        AllowOverride All" >> /etc/apache2/sites-available/000-default.conf && \
    echo "        Require all granted" >> /etc/apache2/sites-available/000-default.conf && \
    echo "    </Directory>" >> /etc/apache2/sites-available/000-default.conf && \
    echo "    ErrorLog \${APACHE_LOG_DIR}/error.log" >> /etc/apache2/sites-available/000-default.conf && \
    echo "    CustomLog \${APACHE_LOG_DIR}/access.log combined" >> /etc/apache2/sites-available/000-default.conf && \
    echo "</VirtualHost>" >> /etc/apache2/sites-available/000-default.conf && \
    echo "Apache configured"

# Create startup script
RUN echo "=== Creating Startup Script ===" && \
    echo '#!/bin/bash' > /usr/local/bin/startup.sh && \
    echo 'echo "Starting application..."' >> /usr/local/bin/startup.sh && \
    echo 'php artisan config:clear' >> /usr/local/bin/startup.sh && \
    echo 'php artisan cache:clear' >> /usr/local/bin/startup.sh && \
    echo 'php artisan migrate --force || true' >> /usr/local/bin/startup.sh && \
    echo 'apache2-foreground' >> /usr/local/bin/startup.sh && \
    chmod +x /usr/local/bin/startup.sh && \
    echo "Startup script created"

RUN echo "=== Docker Build Complete ==="

EXPOSE 80
CMD ["/usr/local/bin/startup.sh"]